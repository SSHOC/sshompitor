name: Fetch API Hits Count

on:
  schedule:
    - cron: "0 1 * * *"  # Run every day
  workflow_dispatch:

jobs:
  fetch_api_hits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Query API and extract hits for categories and sources
        run: |
          # Generate the current timestamp (Unix time in seconds)
          TIMESTAMP=$(date +%s)

          # Declare an associative array to store categories and their API endpoints
          declare -A ENDPOINTS=(
            ["tool-or-service"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=tool-or-service&advanced=false&includeSteps=false"
            ["training-material"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=training-material&advanced=false&includeSteps=false"
            ["publication"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=publication&advanced=false&includeSteps=false"
            ["dataset"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=dataset&advanced=false&includeSteps=false"
            ["workflow"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=workflow&advanced=false&includeSteps=false"
          )

          # Create a directory for storing data
          mkdir -p $GITHUB_WORKSPACE/data

          #### Handling category hits ####
          # Initialize the hits JSON structure for categories
          echo "{\"$TIMESTAMP\": {" > $GITHUB_WORKSPACE/data/items.json

          # Iterate over the categories and query the corresponding API
          FIRST_ITEM=true
          for CATEGORY in "${!ENDPOINTS[@]}"; do
            # Query the API
            RESPONSE=$(curl -s "${ENDPOINTS[$CATEGORY]}")
            # Extract the hits using jq
            HITS=$(echo $RESPONSE | jq -r '.hits')

            # Append the results to the JSON file in the desired format
            if [ "$FIRST_ITEM" = true ]; then
              echo "\"$CATEGORY\": $HITS" >> $GITHUB_WORKSPACE/data/items.json
              FIRST_ITEM=false
            else
              echo ", \"$CATEGORY\": $HITS" >> $GITHUB_WORKSPACE/data/items.json
            fi
          done

          # Close the JSON structure for categories
          echo "}}" >> $GITHUB_WORKSPACE/data/items.json

          #### Handling source hits with updated API endpoint ####
          # Query the list of sources from the API
          SOURCES_RESPONSE=$(curl -s "https://marketplace-api.sshopencloud.eu/api/sources")
          # Extract the sources using jq
          SOURCE_IDS=$(echo $SOURCES_RESPONSE | jq -r '.sources[] | .id')
          SOURCE_LABEL=$(echo $SOURCES_RESPONSE | jq -r '.sources[] | .label')

          # Initialize the hits JSON structure for sources
          echo "{\"$TIMESTAMP\": {" > $GITHUB_WORKSPACE/data/sources.json
          
          # Initialize the first source entry flag
          FIRST_SOURCE=true

          # Iterate over the source IDs and query their hits from the new endpoint
          for SOURCE_ID in $SOURCE_IDS; do
            # Fetch the source-specific items and hits
            SOURCE_RESPONSE=$(curl -s "https://marketplace-api.sshopencloud.eu/api/sources/$SOURCE_ID/items")
            SOURCE_HITS=$(echo $SOURCE_RESPONSE | jq -r '.hits')

            # Append the source hits to the JSON file
            if [ "$FIRST_SOURCE" = true ]; then
              echo "\"$SOURCE_LABEL\": $SOURCE_HITS" >> $GITHUB_WORKSPACE/data/sources.json
              FIRST_SOURCE=false
            else
              echo ", \"$SOURCE_LABEL\": $SOURCE_HITS" >> $GITHUB_WORKSPACE/data/sources.json
            fi
          done

          # Close the JSON structure for sources
          echo "}}" >> $GITHUB_WORKSPACE/data/sources.json

      - name: Commit and push category hits to items.json
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Pull the latest changes from the remote without rebase to avoid conflicts
          git pull --no-rebase https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

          # Check if items.json exists, if not initialize it as an empty JSON object
          if [ ! -f items.json ]; then
            echo "{}" > items.json
          fi

          # Append the new hits data to items.json using jq
          jq -s '.[0] * .[1]' $GITHUB_WORKSPACE/data/items.json items.json > $GITHUB_WORKSPACE/data/merged_items.json

          # Replace items.json with the merged content
          mv $GITHUB_WORKSPACE/data/merged_items.json items.json

          # Ensure data/items.json is not being tracked
          git rm --cached $GITHUB_WORKSPACE/data/items.json || true

          # Add and commit the updated items.json
          git add items.json
          git commit -m "Add new hits count at $(date)" || exit 0  # No commit if no changes

          # Push the changes to the remote repository
          git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

      - name: Commit and push source hits to sources.json
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Pull the latest changes from the remote without rebase to avoid conflicts
          git pull --no-rebase https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

          # Check if sources.json exists, if not initialize it as an empty JSON object
          if [ ! -f sources.json ]; then
            echo "{}" > sources.json
          fi

          # Append the new source hits data to sources.json using jq
          jq -s '.[0] * .[1]' $GITHUB_WORKSPACE/data/sources.json sources.json > $GITHUB_WORKSPACE/data/merged_sources.json

          # Replace sources.json with the merged content
          mv $GITHUB_WORKSPACE/data/merged_sources.json sources.json

          # Ensure data/sources.json is not being tracked
          git rm --cached $GITHUB_WORKSPACE/data/sources.json || true

          # Add and commit the updated sources.json
          git add sources.json
          git commit -m "Add new source hits count at $(date)" || exit 0  # No commit if no changes

          # Push the changes to the remote repository
          git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main
