name: Fetch API Hits Count

on:
  schedule:
    - cron: "0 1 * * *"  # Run every day
  workflow_dispatch:

jobs:
  fetch_api_hits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Query API and extract hits for categories and sources
        run: |
          TIMESTAMP=$(date +%s)
          mkdir -p $GITHUB_WORKSPACE/data

          declare -A ENDPOINTS=(
            ["tool-or-service"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=tool-or-service&advanced=false&includeSteps=false"
            ["training-material"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=training-material&advanced=false&includeSteps=false"
            ["publication"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=publication&advanced=false&includeSteps=false"
            ["dataset"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=dataset&advanced=false&includeSteps=false"
            ["workflow"]="https://marketplace-api.sshopencloud.eu/api/item-search?categories=workflow&advanced=false&includeSteps=false"
          )

          echo "{\"$TIMESTAMP\": {" > $GITHUB_WORKSPACE/data/items.json
          CATEGORY_ZERO_HITS=true
          FIRST_ITEM=true

          TMP_FULL="$GITHUB_WORKSPACE/data/full_items_body.json"
          echo "{" > "$TMP_FULL"
          FIRST_FULL=true

          for CATEGORY in "${!ENDPOINTS[@]}"; do
            BASE_URL="${ENDPOINTS[$CATEGORY]}"

            FIRST_PAGE=$(curl -s "${BASE_URL}&page=1")
            TOTAL_PAGES=$(echo "$FIRST_PAGE" | jq -r '.pages // 1')
            HITS=$(echo "$FIRST_PAGE" | jq -r '.hits // 0')

            # Prepare temp files for this category
            TMP_DIR="/tmp/category_${CATEGORY}_$RANDOM"
            mkdir -p "$TMP_DIR"
            ITEMS_FILE="$TMP_DIR/items.json"
            METADATA_FILE="$TMP_DIR/meta.json"

            # Save metadata (no items)
            echo "$FIRST_PAGE" | jq 'del(.items)' > "$METADATA_FILE"

            # Start building items array
            echo "[" > "$ITEMS_FILE"

            # First page items
            FIRST=true
            echo "$FIRST_PAGE" | jq -c '.items[]' | while IFS= read -r item; do
              if [ "$FIRST" = true ]; then
                echo "$item" >> "$ITEMS_FILE"
                FIRST=false
              else
                echo "," >> "$ITEMS_FILE"
                echo "$item" >> "$ITEMS_FILE"
              fi
            done

            # Remaining pages
            for ((i = 2; i <= TOTAL_PAGES; i++)); do
              PAGE_ITEMS=$(curl -s "${BASE_URL}&page=${i}" | jq -c '.items[]')
              while IFS= read -r item; do
                echo "," >> "$ITEMS_FILE"
                echo "$item" >> "$ITEMS_FILE"
              done <<< "$PAGE_ITEMS"
            done

            # Close array
            echo "]" >> "$ITEMS_FILE"

            # Merge into full response
            RESPONSE=$(jq -s '.[0] + {items: .[1]}' "$METADATA_FILE" "$ITEMS_FILE")

            if [ "$FIRST_ITEM" = true ]; then
              echo "\"$CATEGORY\": $HITS" >> $GITHUB_WORKSPACE/data/items.json
              FIRST_ITEM=false
            else
              echo ", \"$CATEGORY\": $HITS" >> $GITHUB_WORKSPACE/data/items.json
            fi

            if [ "$FIRST_FULL" = true ]; then
              echo "\"$CATEGORY\": $RESPONSE" >> "$TMP_FULL"
              FIRST_FULL=false
            else
              echo ", \"$CATEGORY\": $RESPONSE" >> "$TMP_FULL"
            fi

            if [ "$HITS" -gt 0 ]; then
              CATEGORY_ZERO_HITS=false
            fi
          done

          echo "}}" >> $GITHUB_WORKSPACE/data/items.json
          echo "}" >> "$TMP_FULL"
          jq -n --arg ts "$TIMESTAMP" --slurpfile data "$TMP_FULL" '{($ts): $data[0]}' > $GITHUB_WORKSPACE/data/full_items.json

          if [ "$CATEGORY_ZERO_HITS" = true ]; then
            echo "All category hits returned 0. API might be down. Skipping this run."
            exit 0
          fi

          #### Sources ####
          SOURCES_RESPONSE=$(curl -s "https://marketplace-api.sshopencloud.eu/api/sources")
          echo "{\"$TIMESTAMP\": $SOURCES_RESPONSE}" > $GITHUB_WORKSPACE/data/full_sources.json
          SOURCE_IDS=$(echo $SOURCES_RESPONSE | jq -r '.sources[] | .id')

          echo "{\"$TIMESTAMP\": {" > $GITHUB_WORKSPACE/data/sources.json
          FIRST_SOURCE=true
          SOURCE_ZERO_HITS=true

          for SOURCE_ID in $SOURCE_IDS; do
            SOURCE_RESPONSE=$(curl -s "https://marketplace-api.sshopencloud.eu/api/sources/$SOURCE_ID/items")
            SOURCE_HITS=$(echo "$SOURCE_RESPONSE" | jq -r '.hits // 0')
            SOURCE_LABEL=$(echo $SOURCES_RESPONSE | jq -r --arg id "$SOURCE_ID" '.sources[] | select(.id == ($id|tonumber)) | .label // "Unknown Source"')
            SAFE_LABEL=$(echo "$SOURCE_LABEL" | sed 's/[^[:print:]]//g')

            if [ "$FIRST_SOURCE" = true ]; then
              echo "\"$SAFE_LABEL\": $SOURCE_HITS" >> $GITHUB_WORKSPACE/data/sources.json
              FIRST_SOURCE=false
            else
              echo ", \"$SAFE_LABEL\": $SOURCE_HITS" >> $GITHUB_WORKSPACE/data/sources.json
            fi

            if [ "$SOURCE_HITS" -gt 0 ]; then
              SOURCE_ZERO_HITS=false
            fi
          done

          echo "}}" >> $GITHUB_WORKSPACE/data/sources.json

          if [ "$SOURCE_ZERO_HITS" = true ]; then
            echo "All source hits returned 0. API might be down. Skipping this run."
            exit 0
          fi

      - name: Commit and push category hits to items.json
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull --no-rebase https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

          if [ ! -f items.json ]; then
            echo "{}" > items.json
          fi

          jq -s '.[0] * .[1]' $GITHUB_WORKSPACE/data/items.json items.json > $GITHUB_WORKSPACE/data/merged_items.json
          mv $GITHUB_WORKSPACE/data/merged_items.json items.json

          git rm --cached $GITHUB_WORKSPACE/data/items.json || true
          git add items.json
          git commit -m "Add new hits count at $(date)" || exit 0
          git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

      - name: Commit and push source hits to sources.json
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull --no-rebase https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

          if [ ! -f sources.json ]; then
            echo "{}" > sources.json
          fi

          jq -s '.[0] * .[1]' $GITHUB_WORKSPACE/data/sources.json sources.json > $GITHUB_WORKSPACE/data/merged_sources.json
          mv $GITHUB_WORKSPACE/data/merged_sources.json sources.json

          git rm --cached $GITHUB_WORKSPACE/data/sources.json || true
          git add sources.json
          git commit -m "Add new source hits count at $(date)" || exit 0
          git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

      - name: Commit and push full_items.json (timestamped)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull --no-rebase https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main

          TIMESTAMP=$(jq -r 'keys[0]' $GITHUB_WORKSPACE/data/full_items.json)
          FILE_NAME="data/full_items_${TIMESTAMP}.json"
          cp $GITHUB_WORKSPACE/data/full_items.json "$FILE_NAME"

          git add "$FILE_NAME"
          git commit -m "Add full API snapshot for $TIMESTAMP" || exit 0
          git push https://x-access-token:${{ secrets.ACTIONS_PAT }}@github.com/mkrzmr/sshompitor.git main
